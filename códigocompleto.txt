Tengo una app con este arbol: 
├── package.json
├── package-lock.json
├── public
│   ├── css
│   │   └── styles.css
│   ├── index.html
│   ├── js
│   │   ├── app.js
│   │   ├── chat.js
│   │   ├── login.js
│   │   ├── sleepDiary.js
│   │   └── ui.js
│   └── login.html
└── src
    ├── config
    │   └── database.js
    ├── middleware
    │   └── auth.js
    ├── models
    │   └── index.js
    ├── routes
    │   ├── data.js
    │   ├── login.js
    │   ├── ollama.js
    │   └── users.js
    ├── server.js
    └── services
        └── ollamaService.js

    
    Los archivos uno por uno son los siguientes. 
    - Package.json: 
 {
  "name": "sleep-diary",
  "version": "1.0.0",
  "main": "src/server.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "Ana Belén",
  "license": "ISC",
  "description": "A smart sleep diary application",
  "engines": {
    "node": ">=14.0.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.7"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "jsonwebtoken": "^8.5.1",
    "next": "^15.0.3",
    "ollama": "^0.4.4",
    "pg": "^8.11.0",
    "pg-hstore": "^2.3.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "sequelize": "^6.32.1"
  }
}

-styles.css: 
:root {
    --bg-color: #ffffff;
    --text-color: #333333;
    --primary-color: #4a90e2;
    --secondary-color: #f0f0f0;
    --border-color: #e0e0e0;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
    transition: background-color 0.3s, color 0.3s;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

h1, h2 {
    color: var(--primary-color);
}

.section {
    background-color: var(--secondary-color);
    border-radius: 5px;
    padding: 20px;
    margin-bottom: 20px;
}

form {
    display: flex;
    flex-direction: column;
}

input, button {
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
}

button {
    background-color: var(--primary-color);
    color: white;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #3a7bc8;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid var(--border-color);
    padding: 10px;
    text-align: left;
}

.chat-messages {
    height: 300px;
    overflow-y: auto;
    border: 1px solid var(--border-color);
    padding: 10px;
    margin-bottom: 10px;
}

.user-message, .ai-message {
    margin-bottom: 10px;
    padding: 5px 10px;
    border-radius: 5px;
}

.user-message {
    background-color: #e6f2ff;
    align-self: flex-end;
}

.ai-message {
    background-color: #f0f0f0;
    align-self: flex-start;
}

.dark-mode-toggle {
    position: fixed;
    bottom: 20px;
    right: 20px;
    padding: 10px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

body.dark-mode {
    --bg-color: #1a1a1a;
    --text-color: #f0f0f0;
    --primary-color: #64b5f6;
    --secondary-color: #2c2c2c;
    --border-color: #444444;
}

.loading-message {
  font-style: italic;
  color: #888;
}

-app.js: 
//Importamos módulos necesarios para la aplicación que son parte del programa.
import { sleepDiary } from './sleepDiary.js'; // Maneja las funciones del diario de sueño.
import { ui } from './ui.js'; // Controla la interfaz de usuario.
import { chat } from './chat.js'; // Permite funcionalidades de chat.

// Esperamos a que toda la página cargue completamente antes de ejecutar el código.
document.addEventListener('DOMContentLoaded', async () => {
    // Obtenemos el token y el ID del usuario guardados en el navegador.
    // Esto se utiliza para verificar que el usuario haya iniciado sesión.
    const token = localStorage.getItem('token');
    const userId = localStorage.getItem('userId');

    // Si no hay token o ID de usuario, redirigimos al usuario a la página de inicio de sesión.
    if (!token || !userId) {
        window.location.href = 'login.html'; // Cambia la página actual a la de inicio de sesión.
        return; // Detiene la ejecución del resto del código.
    }

    // Inicia el módulo del diario de sueño con el token del usuario.
    try {
        console.log('Initializing sleepDiary...'); // Mensaje para saber qué está haciendo el programa.
        await sleepDiary.init(token);
        // Inicia el módulo de la interfaz de usuario.
        console.log('Initializing UI...');
        ui.init();
        // Inicia el módulo de chat.
        console.log('Initializing chat...');
        chat.init();
        // Si todos los módulos se inician correctamente, mostramos este mensaje en la consola.
        console.log('All modules initialized successfully.');

        // Muestra información del usuario en la página.
        const userInfo = document.getElementById('user-info'); // Seleccionamos el área donde aparecerá la información.
        userInfo.textContent = `Usuario conectado: ID ${userId}`; // Escribimos el ID del usuario conectado.

        // Hacemos visible el botón de cierre de sesión y lo configuramos.
        const logoutButton = document.getElementById('logout-button'); // Seleccionamos el botón.
        logoutButton.style.display = 'block'; // Hacemos que el botón aparezca en la página.
        // Añadimos una acción al botón: cuando se haga clic, cerrará la sesión.
        logoutButton.addEventListener('click', () => {
            // Eliminamos el token y el ID del usuario del navegador para cerrar sesión.
            localStorage.removeItem('token');
            localStorage.removeItem('userId');
            // Redirigimos al usuario de vuelta a la página de inicio de sesión.
            window.location.href = 'login.html';
        });
    } catch (error) {
        // Si algo falla al inicializar la aplicación, mostramos un mensaje de error en la consola.
        console.error('Error initializing application:', error);
    }
});

-chat.js
export const chat = {
    init() {
      this.initializeChat();
    },
  
    initializeChat() {
      const chatForm = document.getElementById('chat-form');
      const chatInput = document.getElementById('chat-input');
      const chatMessages = document.getElementById('chat-messages');
  
      chatForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const message = chatInput.value.trim();
  
        if (message) {
          this.addMessage(message, 'user-message');
          chatInput.value = '';
          await this.generateOllamaResponse(message);
        }
      });
    },
  
    addMessage(message, className) {
      const chatMessages = document.getElementById('chat-messages');
      const messageElement = document.createElement('div');
      className.split(' ').forEach(cls => messageElement.classList.add(cls));
      messageElement.textContent = message;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    },
  
    async generateOllamaResponse(userMessage) {
      this.addMessage('Generando respuesta...', 'ai-message loading-message');
      try {
        console.log('Sending request to Ollama');
        const response = await fetch('/api/ollama', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ prompt: userMessage }),
        });
  
        console.log('Received response from Ollama');
        if (!response.ok) {
          throw new Error(`Error en la respuesta del servidor: ${response.status}`);
        }
  
        const data = await response.json();
        console.log('Ollama response data:', data);
        
        // Eliminar el mensaje de carga
        const loadingMessage = document.querySelector('.loading-message');
        if (loadingMessage) {
          loadingMessage.remove();
        }
  
        this.addMessage(data.response, 'ai-message');
      } catch (error) {
        console.error('Error al generar respuesta de Ollama:', error);
        
        // Eliminar el mensaje de carga
        const loadingMessage = document.querySelector('.loading-message');
        if (loadingMessage) {
          loadingMessage.remove();
        }
  
        this.addMessage(`Error: ${error.message}. Por favor, intenta de nuevo más tarde.`, 'ai-message error');
      }
    },
  };

-login.js
document.addEventListener('DOMContentLoaded', () => {
    const loginForm = document.getElementById('login-form');
    const errorMessage = document.getElementById('error-message');

    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        try {
            const response = await fetch('/api/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, password }),
            });

            const data = await response.json();

            if (response.ok) {
                console.log('Login successful:', data);
                localStorage.setItem('token', data.token);
                localStorage.setItem('userId', data.userId);
                window.location.href = 'index.html';
            } else {
                console.error('Login failed:', data.message);
                errorMessage.textContent = data.message || 'Credenciales inválidas';
            }
        } catch (error) {
            console.error('Error during login:', error);
            errorMessage.textContent = 'Error al iniciar sesión';
        }
    });
});


-sleepdiary.js: 
export const sleepDiary = {
    sleepEntries: [],
    token: null,

    async init(token) {
        this.token = token;
        await this.loadEntries();
    },

    async loadEntries() {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                console.error('No token found');
                return;
            }
            console.log('Token being sent:', token); // Añade esta línea para depuración
            const response = await fetch('http://localhost:3000/api/data', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                this.sleepEntries = data.sleepEntries || [];
                console.log('Sleep entries loaded:', this.sleepEntries);
            } else {
                console.error('Failed to load sleep entries:', response.status, response.statusText);
                // Añade esta línea para ver el cuerpo de la respuesta en caso de error
                const errorBody = await response.text();
                console.error('Error response body:', errorBody);
            }
        } catch (error) {
            console.error('Error loading sleep entries:', error);
        }
    },

    async addEntry(entry) {
        try {
            const response = await fetch('http://localhost:3000/api/data', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`
                },
                body: JSON.stringify(entry)
            });
            if (response.ok) {
                this.sleepEntries.push(entry);
                console.log('Sleep entry added:', entry);
            } else {
                console.error('Failed to add sleep entry');
            }
        } catch (error) {
            console.error('Error adding sleep entry:', error);
        }
    },

    calculateStatistics() {
        if (this.sleepEntries.length === 0) return null;

        const totalDuration = this.sleepEntries.reduce((sum, entry) => sum + entry.duration, 0);
        const totalQuality = this.sleepEntries.reduce((sum, entry) => sum + entry.quality, 0);
        const avgDuration = totalDuration / this.sleepEntries.length;
        const avgQuality = totalQuality / this.sleepEntries.length;

        const lastWeekEntries = this.sleepEntries.filter(entry => {
            const entryDate = new Date(entry.date);
            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);
            return entryDate >= weekAgo;
        });

        const weeklyAvgDuration = lastWeekEntries.reduce((sum, entry) => sum + entry.duration, 0) / lastWeekEntries.length || 0;

        return {
            avgDuration: avgDuration.toFixed(2),
            avgQuality: avgQuality.toFixed(2),
            totalEntries: this.sleepEntries.length,
            weeklyAvgDuration: weeklyAvgDuration.toFixed(2)
        };
    },

    async generatePersonalizedTips(entry) {
        try {
            const stats = this.calculateStatistics();
            const prompt = `
                Basado en los siguientes datos de sueño y estadísticas, genera consejos personalizados para mejorar la calidad del sueño:
                
                Entrada actual:
                - Fecha: ${entry.date}
                - Duración: ${entry.duration} horas
                - Calidad: ${entry.quality}/5
                
                Estadísticas generales:
                - Duración promedio: ${stats.avgDuration} horas
                - Calidad promedio: ${stats.avgQuality}/5
                - Total de entradas: ${stats.totalEntries}
                - Promedio semanal: ${stats.weeklyAvgDuration} horas
                
                Por favor, proporciona 3 consejos específicos y personalizados basados en estos datos.
            `;

            const response = await fetch('/api/ollama', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ prompt }),
            });

            if (!response.ok) {
                throw new Error('Error en la respuesta del servidor');
            }

            const data = await response.json();
            return data.response.split('\n').filter(tip => tip.trim() !== '');
        } catch (error) {
            console.error('Error al generar consejos personalizados:', error);
            return [
                'Hubo un error al generar consejos personalizados.',
                'Por favor, intenta nuevamente más tarde.',
            ];
        }
    },

};

-ui.js
import { sleepDiary } from './sleepDiary.js';

export const ui = {
    init() {
        this.bindEvents();
        this.renderSleepHistory();
        this.loadScheduledTips();
        this.startNextTipCountdown();
        this.renderSleepStatistics();
        this.initDarkMode();
    },

    bindEvents() {
        const sleepForm = document.getElementById('sleep-form');
        sleepForm.addEventListener('submit', this.handleSleepFormSubmit.bind(this));
    },

    handleSleepFormSubmit(event) {
        event.preventDefault();
        
        const sleepDate = document.getElementById('sleep-date').value;
        const sleepDuration = document.getElementById('sleep-duration').value;
        const sleepQuality = document.querySelector('input[name="sleep-quality"]:checked').value;

        const entry = {
            date: sleepDate,
            duration: parseFloat(sleepDuration),
            quality: parseInt(sleepQuality)
        };

        sleepDiary.addEntry(entry);
        this.showPersonalizedTips(entry);
        this.renderSleepHistory();
        this.renderSleepStatistics();
        this.clearForm();
    },

    async showPersonalizedTips(entry) {
        const consejosContainer = document.getElementById('consejos-content');
        consejosContainer.innerHTML = '<p>Generando consejos personalizados...</p>';

        try {
            const tips = await sleepDiary.generatePersonalizedTips(entry);
            consejosContainer.innerHTML = '';

            tips.forEach(tip => {
                const tipElement = document.createElement('p');
                tipElement.textContent = tip;
                consejosContainer.appendChild(tipElement);
            });
        } catch (error) {
            console.error('Error al mostrar consejos personalizados:', error);
            consejosContainer.innerHTML = '<p>Error al generar consejos. Por favor, intenta nuevamente.</p>';
        }
    },

    renderSleepHistory() {
        const historyBody = document.getElementById('historial-body');
        historyBody.innerHTML = '';

        sleepDiary.sleepEntries.forEach(entry => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${entry.date}</td>
                <td>${entry.duration} horas</td>
                <td>${entry.quality}/5</td>
            `;
            historyBody.appendChild(row);
        });
    },

    clearForm() {
        document.getElementById('sleep-form').reset();
    },

    loadScheduledTips() {
        // Agregar franjas horarias para los consejos
        const scheduledTips = [
            { time: 'morning', tip: 'Evita cafeína después de las 3 PM' },
            { time: 'morning', tip: 'Establece un horario de sueño consistente' },
            { time: 'afternoon', tip: 'Crea un ambiente oscuro y fresco para dormir' },
            { time: 'afternoon', tip: 'Practica técnicas de respiración antes de dormir' },
            { time: 'night', tip: 'No uses dispositivos electrónicos antes de dormir' },
            { time: 'night', tip: 'Evita cenas pesadas antes de acostarte' }
        ];

        const currentTime = new Date().getHours(); // Hora actual
        const currentTipContainer = document.getElementById('lista-consejos-programados');
        currentTipContainer.innerHTML = '';

        // Filtrar los consejos según la franja horaria actual
        let currentTimePeriod = '';
        if (currentTime >= 6 && currentTime < 12) {
            currentTimePeriod = 'morning'; // Mañana
        } else if (currentTime >= 12 && currentTime < 18) {
            currentTimePeriod = 'afternoon'; // Tarde
        } else {
            currentTimePeriod = 'night'; // Noche
        }

        // Filtrar y mostrar solo los consejos de la franja horaria actual
        scheduledTips
            .filter(tip => tip.time === currentTimePeriod)
            .forEach(tip => {
                const tipElement = document.createElement('p');
                tipElement.textContent = tip.tip;
                currentTipContainer.appendChild(tipElement);
            });
    },

    startNextTipCountdown() {
        const counterElement = document.getElementById('contador-proximo-consejo');
        
        const updateCountdown = () => {
            const now = new Date();
            const nextTip = new Date();
            nextTip.setHours(22, 0, 0, 0);

            if (now > nextTip) {
                nextTip.setDate(nextTip.getDate() + 1);
            }

            const difference = nextTip - now;
            const hours = Math.floor(difference / (1000 * 60 * 60));
            const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((difference % (1000 * 60)) / 1000);

            counterElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        };

        updateCountdown();
        setInterval(updateCountdown, 1000);
    },

    renderSleepStatistics() {
        const stats = sleepDiary.calculateStatistics();
        const statsContainer = document.getElementById('estadisticas-content');
        
        if (stats) {
            statsContainer.innerHTML = `
                <p>Duración promedio: ${stats.avgDuration} horas</p>
                <p>Calidad promedio: ${stats.avgQuality}/5</p>
                <p>Total de entradas: ${stats.totalEntries}</p>
                <p>Promedio semanal: ${stats.weeklyAvgDuration} horas</p>
            `;
        } else {
            statsContainer.innerHTML = '<p>No hay suficientes datos para mostrar estadísticas.</p>';
        }
    },

    initDarkMode() {
        const darkModeToggle = document.getElementById('dark-mode-toggle');
        const body = document.body;

        darkModeToggle.addEventListener('click', () => {
            body.classList.toggle('dark-mode');
            localStorage.setItem('darkMode', body.classList.contains('dark-mode'));
        });

        if (localStorage.getItem('darkMode') === 'true') {
            body.classList.add('dark-mode');
        }
    }
};

-index.html: 
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diario del Sueño Inteligente - Mejora tu descanso</title>
    <meta name="description" content="Registra y analiza tus patrones de sueño para mejorar tu descanso y bienestar general con nuestro Diario del Sueño Inteligente.">
    <link rel="stylesheet" href="./css/styles.css">
</head>
<body>
    <div class="container">
        <h1>Diario del Sueño Inteligente</h1>
        <p>Registra tu sueño y recibe consejos personalizados para dormir mejor</p>

        <div id="user-info"></div>
        <button id="logout-button" style="display: none;">Cerrar Sesión</button>

        <form id="sleep-form">
            <label for="sleep-date">Fecha:</label>
            <input type="date" id="sleep-date" required>

            <label for="sleep-duration">Duración del Sueño (horas):</label>
            <input type="number" id="sleep-duration" step="0.5" min="0" max="12" required>

            <fieldset>
                <legend>Calidad del Sueño</legend>
                <input type="radio" id="quality-1" name="sleep-quality" value="1" required>
                <label for="quality-1">1 (Muy Malo)</label>
                <input type="radio" id="quality-2" name="sleep-quality" value="2">
                <label for="quality-2">2 (Malo)</label>
                <input type="radio" id="quality-3" name="sleep-quality" value="3">
                <label for="quality-3">3 (Regular)</label>
                <input type="radio" id="quality-4" name="sleep-quality" value="4">
                <label for="quality-4">4 (Bueno)</label>
                <input type="radio" id="quality-5" name="sleep-quality" value="5">
                <label for="quality-5">5 (Excelente)</label>
            </fieldset>

            <button type="submit">Guardar Entrada</button>
        </form>

        <section id="consejos-personalizados" class="section">
            <h2>Consejos Personalizados</h2>
            <div id="consejos-content" class="consejos-content"></div>
        </section>

        <section id="historial-sueno" class="section">
            <h2>Historial de Sueño</h2>
            <table>
                <thead>
                    <tr>
                        <th>Fecha</th>
                        <th>Duración</th>
                        <th>Calidad</th>
                    </tr>
                </thead>
                <tbody id="historial-body"></tbody>
            </table>
        </section>

        <section id="estadisticas-sueno" class="section">
            <h2>Estadísticas de Sueño</h2>
            <div id="estadisticas-content"></div>
        </section>

        <section id="consejos-programados" class="section">
            <h2>Consejos Programados</h2>
            <div id="lista-consejos-programados"></div>
            <p>Próximo consejo en: <span id="contador-proximo-consejo">00:00:00</span></p>
        </section>

        <section id="chat-container" class="section">
            <h2>Chat con Asistente de Sueño</h2>
            <div id="chat-messages" class="chat-messages"></div>
            <form id="chat-form">
                <input type="text" id="chat-input" placeholder="Escribe tu mensaje...">
                <button type="submit">Enviar</button>
            </form>
        </section>
    </div>

    <button id="dark-mode-toggle" class="dark-mode-toggle">Cambiar Modo</button>
    <script type="module" src="./js/app.js"></script>
    <script type="module" src="./js/chat.js"></script>
    <script type="module" src="./js/sleepDiary.js"></script>
    <script type="module" src="./js/ui.js"></script>
</body>
</html>

-login.html: 
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iniciar Sesión - Diario del Sueño Inteligente</title>
    <link rel="stylesheet" href="./css/styles.css">
</head>
<body>
    <div class="container">
        <h1>Iniciar Sesión</h1>
        <form id="login-form">
            <label for="username">Nombre de usuario:</label>
            <input type="text" id="username" required>

            <label for="password">Contraseña:</label>
            <input type="password" id="password" required>

            <button type="submit">Iniciar Sesión</button>
        </form>
        <p id="error-message" class="error-message"></p>
    </div>
    <script src="./js/login.js"></script>
</body>
</html>

-config/database.js:
const { Sequelize } = require('sequelize');
const dotenv = require('dotenv');

dotenv.config();

const database = process.env.DB_NAME || 'appsueño';
const username = process.env.DB_USER || 'postgres';
const password = process.env.DB_PASSWORD || 'changeme';
const host = process.env.DB_HOST || 'localhost';

const sequelize = new Sequelize(database, username, password, {
  host,
  dialect: 'postgres',
  logging: console.log,
  dialectOptions: {
    ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
  }
});

module.exports = sequelize;

-auth.js:
const jwt = require('jsonwebtoken');

const verifyToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    res.writeHead(401, { 'Content-Type': 'application/json' });
    return res.end(JSON.stringify({ message: 'No token provided' }));
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = decoded.id;
    next();
  } catch (error) {
    console.error('Token verification error:', error);
    res.writeHead(401, { 'Content-Type': 'application/json' });
    return res.end(JSON.stringify({ message: 'Invalid token', error: error.message }));
  }
};

module.exports = { verifyToken };

Dentro de models esta index.js:
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const User = sequelize.define('User', {
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false
  }
}, { tableName: 'users' });

const SleepEntry = sequelize.define('SleepEntry', {
  date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  duration: {
    type: DataTypes.FLOAT,
    allowNull: false
  },
  quality: {
    type: DataTypes.INTEGER,
    allowNull: false
  }
}, { tableName: 'sleep_entries' });

User.hasMany(SleepEntry, { as: 'sleepEntries', foreignKey: 'userId' });
SleepEntry.belongsTo(User, { foreignKey: 'userId' });

module.exports = {
  sequelize,
  User,
  SleepEntry
};


Dentro de routes estan los siguientes archivos: 
-data.js: 
const { SleepEntry } = require('../models');

const handleGetSleepData = async (req, res) => {
  const userId = req.userId;
  try {
    console.log('Fetching sleep data for user:', userId);
    const sleepEntries = await SleepEntry.findAll({ where: { userId } });
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ sleepEntries }));
  } catch (error) {
    console.error('Error fetching sleep data:', error);
    res.writeHead(500, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Internal server error', error: error.message }));
  }
};

const handlePostSleepData = async (req, res) => {
  const userId = req.userId;
  try {
    const sleepEntry = JSON.parse(req.body);
    console.log('Adding sleep entry for user:', userId, sleepEntry);
    const newEntry = await SleepEntry.create({ ...sleepEntry, userId });
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Data added successfully', entry: newEntry }));
  } catch (error) {
    console.error('Error adding sleep entry:', error);
    res.writeHead(400, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: error.message }));
  }
};

module.exports = { handleGetSleepData, handlePostSleepData };

-login.js: 
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { User } = require('../models');

const handleLogin = async (req, res) => {
  try {
    const { username, password } = JSON.parse(req.body);
    console.log('Login attempt:', { username });

    const user = await User.findOne({ where: { username } });
    
    if (user && await bcrypt.compare(password, user.password)) {
      const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });
      console.log('Login successful:', { username, userId: user.id });
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ token, userId: user.id }));
    } else {
      console.log('Login failed:', { username });
      res.writeHead(401, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ message: 'Invalid credentials' }));
    }
  } catch (error) {
    console.error('Login error:', error);
    res.writeHead(500, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Internal server error', error: error.message }));
  }
};

module.exports = { handleLogin };

-ollama.js:
const { generateResponse } = require('../services/ollamaService');

const handleOllamaRequest = async (req, res) => {
  try {
    console.log('Received Ollama request');
    const { prompt } = JSON.parse(req.body);
    console.log('Prompt:', prompt);
    
    const response = await generateResponse(prompt);
    console.log('Ollama response:', response);
    
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ response }));
  } catch (error) {
    console.error('Error in Ollama request:', error);
    res.writeHead(500, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Error processing Ollama request', error: error.message }));
  }
};

module.exports = { handleOllamaRequest };

-users.js: 
const bcrypt = require('bcryptjs');
const sequelize = require('../config/database');

const handleGetUsers = async (req, res) => {
  try {
    const users = await sequelize.models.User.findAll({
      attributes: ['id', 'username']
    });
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify(users));
  } catch (error) {
    console.error('Error fetching users:', error);
    res.writeHead(500, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Internal server error' }));
  }
};

const handleCreateUser = async (req, res) => {
  try {
    const { username, password } = JSON.parse(req.body);
    if (!username || !password) {
      throw new Error('Missing username or password');
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await sequelize.models.User.create({ username, password: hashedPassword });
    console.log('New user created:', { id: user.id, username: user.username });
    res.writeHead(201, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: 'Usuario creado', id: user.id, username: user.username }));
  } catch (error) {
    console.error('Error creating user:', error);
    res.writeHead(400, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ message: error.message }));
  }
};

module.exports = { handleGetUsers, handleCreateUser };

-server.js: 
const http = require('http');
const fs = require('fs');
const path = require('path');
const { URL } = require('url');
const dotenv = require('dotenv');
const bcrypt = require('bcryptjs');
const cors = require('cors');
const { sequelize, User, SleepEntry } = require('./models');
const { handleGetUsers, handleCreateUser } = require('./routes/users');
const { handleLogin } = require('./routes/login');
const { handleGetSleepData, handlePostSleepData } = require('./routes/data');
const { verifyToken } = require('./middleware/auth');
const { handleOllamaRequest } = require('./routes/ollama');

dotenv.config();

// Initialize database
const initDatabase = async () => {
  try {
    await sequelize.authenticate();
    console.log('Database connection has been established successfully.');
    await sequelize.sync({ alter: true });
    console.log('Database synchronized');

    // Create test user if not exists
    const [testUser, created] = await User.findOrCreate({
      where: { username: 'testuser' },
      defaults: {
        password: await bcrypt.hash('password123', 10)
      }
    });
    if (created) {
      console.log('Test user created:', testUser.toJSON());
    } else {
      console.log('Test user already exists');
    }
  } catch (error) {
    console.error('Unable to connect to the database:', error);
    process.exit(1);  // Exit the process if database connection fails
  }
};

initDatabase();

const corsOptions = {
  origin: 'http://localhost:3000',
  optionsSuccessStatus: 200
};

const server = http.createServer((req, res) => {
  console.log('Received request:', req.method, req.url);

  const url = new URL(req.url, `http://${req.headers.host}`);
  const pathname = url.pathname;

  // Apply CORS
  cors(corsOptions)(req, res, () => {
    // Serve static files
    if (pathname.startsWith('/js/') || pathname.startsWith('/css/') || pathname === '/index.html' || pathname === '/login.html' || pathname === '/') {
      const filePath = path.join(__dirname, '..', 'public', pathname === '/' ? 'index.html' : pathname);
      fs.readFile(filePath, (err, content) => {
        if (err) {
          console.error('Error reading file:', filePath, err);
          res.writeHead(404, { 'Content-Type': 'text/html' });
          res.end('404 Not Found');
        } else {
          const ext = path.extname(filePath);
          let contentType = 'text/html';
          if (ext === '.js') contentType = 'text/javascript';
          if (ext === '.css') contentType = 'text/css';
          res.writeHead(200, { 'Content-Type': contentType });
          res.end(content);
        }
      });
      return;
    }

    // API routes
    if (pathname.startsWith('/api/')) {
      let body = '';
      req.on('data', chunk => {
        body += chunk.toString();
      });

      req.on('end', () => {
        req.body = body;
        console.log('Request body:', body);

        switch (pathname) {
          case '/api/users':
            if (req.method === 'GET') {
              verifyToken(req, res, () => handleGetUsers(req, res));
            } else if (req.method === 'POST') {
              handleCreateUser(req, res);
            } else {
              res.writeHead(405, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ message: 'Method not allowed' }));
            }
            break;
          case '/api/login':
            if (req.method === 'POST') {
              handleLogin(req, res);
            } else {
              res.writeHead(405, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ message: 'Method not allowed' }));
            }
            break;
          case '/api/data':
            if (req.method === 'GET') {
              verifyToken(req, res, () => handleGetSleepData(req, res));
            } else if (req.method === 'POST') {
              verifyToken(req, res, () => handlePostSleepData(req, res));
            } else {
              res.writeHead(405, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ message: 'Method not allowed' }));
            }
            break;
          case '/api/ollama':
            if (req.method === 'POST') {
              handleOllamaRequest(req, res);
            } else {
              res.writeHead(405, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ message: 'Method not allowed' }));
            }
            break;
          default:
            res.writeHead(404, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ message: 'Not found' }));
        }
      });
    } else {
      res.writeHead(404, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ message: 'Not found' }));
    }
  });
});

const port = process.env.PORT || 3000;
const host = '0.0.0.0';
server.listen(port, host, () => console.log(`Server listening on http://${host}:${port}`));



-.env: 
OLLAMA_API_URL=http://localhost:11434/api/generate
JWT_SECRET=your_jwt_secret_key_here
PORT=3000
DB_NAME=appsueño
DB_USER=postgres
DB_PASSWORD=changeme
DB_HOST=localhost
